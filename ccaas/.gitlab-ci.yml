# set envs

stages:
  - validate
  - build
  - test
  - deploy

variables:
  CC_NAME: asset
  CC_VERSION: 0.9
  CC_ID: asset_0.9:28e66b55df029
  CC_PORT: 5055
  REMOTE_FILE_PATH: "/home/${REMOTE_USER}/manifests"
  LXC_NODE: master
  LXC_FILE_PATH: /root/hfb/manifests

include:
  - template: Jobs/Container-Scanning.gitlab-ci.yml
  - template: Jobs/Dependency-Scanning.gitlab-ci.yml

#workflow: #or .standard-rules
#  rules:
#    - if: $CI_COMMIT_BRANCH == "release"

go-lint:
  stage: validate
  tags:
    - ccaas-runner
  image: golangci/golangci-lint:v1.57.2
  script:
    - golangci-lint run -v
  needs: []

go-test:
  stage: validate
  tags:
    - ccaas-runner
  image: golang:1.19
  script:
    - cd asset
    - go test -v -coverprofile=cov.out .
  needs: []

sonarqube-check:
  stage: validate
  tags:
    - ccaas-runner
  image:
    name: sonarsource/sonar-scanner-cli:5.0
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner
  allow_failure: true
  only:
    - pipeline
    - main
  needs:
    - go-test

build-image:
  stage: build
  tags:
    - ccaas-runner
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
  script:
    - docker build -t "$CI_REGISTRY/$CI_PROJECT_PATH:$CC_VERSION" .
    - docker push "$CI_REGISTRY/$CI_PROJECT_PATH:$CC_VERSION"

container_scanning:
  tags:
    - ccaas-runner
  variables:
    #CS_DEFAULT_BRANCH_IMAGE: $CI_REGISTRY/$CI_PROJECT_PATH:$CC_VERSION
    CS_IMAGE: $CI_REGISTRY/$CI_PROJECT_PATH:$CC_VERSION
    #CS_DISABLE_LANGUAGE_VULNERABILITY_SCAN: "false"
  needs:
    - build-image

gemnasium-dependency_scanning:
  tags:
    - ccaas-runner
  rules:
    - if: $CI_COMMIT_BRANCH == "pipeline" && $CI_COMMIT_BRANCH == "pipeline"
  needs:
    - build-image

deploy-kubernetes:
  stage: deploy
  tags:
    - ccaas-runner
  before_script:
    - K8S_VERSION=$(tr '.' '-' <<< $CC_VERSION)
    - bash scripts/create-manifest.sh "$CC_ID" "$CC_NAME" "$CC_VERSION" "$K8S_VERSION" "$CC_PORT" "$CI_REGISTRY/$CI_PROJECT_PATH"
    - apt-get update && apt-get install -y openssh-client
    - chmod 600 $VAR_PATH/$KEY_FILE
  script:
    - scp -i "$KEY_FILE" -o StrictHostKeyChecking=no "./k8s/cc-$CC_NAME-$K8S_VERSION.yaml" "$REMOTE_USER@$REMOTE_ADDRESS:$REMOTE_FILE_PATH"
    - >
      ssh -i "$KEY_FILE" -o StrictHostKeyChecking=no "$REMOTE_USER@$REMOTE_ADDRESS" "lxc exec $LXC_NODE -- kubectl delete secret gitlabcred --ignore-not-found;
      lxc exec $LXC_NODE -- kubectl create secret docker-registry gitlabcred --docker-server=$CI_REGISTRY --docker-username=$CR_DEPLOY_USER --docker-email=$GITLAB_EMAIL --docker-password=$CR_DEPLOY_TOKEN;
      lxc file push $REMOTE_FILE_PATH/cc-$CC_NAME-$K8S_VERSION.yaml $LXC_NODE/$LXC_FILE_PATH/;
      lxc exec $LXC_NODE -- kubectl apply -f $LXC_FILE_PATH/cc-$CC_NAME-$K8S_VERSION.yaml"
